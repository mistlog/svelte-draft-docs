import { ConfigAction as action, ConfigEvent as event } from 'svelte-types';

export default function _() {
    let pressed = false;
    let duration = 2000;

    function longpress(node: HTMLElement, duration: number) {
        let timer: number;

        const handleMousedown = () => {
            timer = window.setTimeout(() => {
                node.dispatchEvent(
                    new CustomEvent('longpress')
                );
            }, duration);
        };

        const handleMouseup = () => {
            window.clearTimeout(timer)
        };

        node.addEventListener('mousedown', handleMousedown);
        node.addEventListener('mouseup', handleMouseup);

        return {
            update(newDuration: number) {
                duration = newDuration;
            },
            destroy() {
                node.removeEventListener('mousedown', handleMousedown);
                node.removeEventListener('mouseup', handleMouseup);
            }
        };
    }

    // we can rename imported config functions
    <div>
        <label>
            <input type="range" bindValue={duration} max={2000} step={100} />
            {duration}ms
    </label>

        <button use={action(longpress, duration)}
            on={event({
                longpress: () => pressed = true,
                mouseenter: () => pressed = false
            })}
        >
            press and hold
    </button>

        <if condition={pressed}>
            <p>congratulations, you pressed and held for {duration}ms</p>
        </if>
    </div>
}